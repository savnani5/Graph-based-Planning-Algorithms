#!/usr/bin/env python

import time
import os
import pygame
import json
import sys
import math
import copy
import rospkg
from collections import deque
# from queue import PriorityQueue
import numpy as np

rospack = rospkg.RosPack()
# Note: Input nodes after approximating only

#-----------------------------------------------------------------------------
# Optimization results
#-----------------------------------------------------------------------------
# The deque class from collections module is used as the data structure to store the nodes because it is faster compared to the python's inbuilt list.
# String is fast in comparion but searching and conversion from list to string is time consuming(experimentally verified)
# Cannot implement binay search to improve searching speeds because we have to search in an unsorted array.
    
#-----------------------------------------------------------------------------
# Node Class
#-----------------------------------------------------------------------------
class Node:
    """ This class stores the attributes(like state and parent node) and methods(like check_obstacle_space, actions, generate children etc.) 
        for the each Node in the Map.""" 
    
    #-------------------------------------------------------------------------
    
    def __init__(self, state, parent, cost_to_come, cost_to_go, cost, ul, ur):
        
        self.state = state                                                     # state is the list of x,y, theta coordinates of the node
        self.parent = parent                                                   # parent attribute stores the parent node of current node
        self.cost_to_come = cost_to_come                                       # cost_to_come
        self.cost_to_go = cost_to_go                                           # cost_to_go
        self.cost = cost                                                       # cost
        self.ul = ul                                                           # Linear velocity of left weheel used to generate the node
        self.ur = ur                                                           # Linear velocity of right weheel used to generate the node

    #-------------------------------------------------------------------------
    
    def __repr__(self):
        return str(self.state)                                                 # This method returns the state information of the node
    
    #-------------------------------------------------------------------------
    
    def check_obstacle_space(self, pot_node):
        """Defining obstacle space constraints using half plane equations."""

        # MAGNIFICATION FACTOR = 100

        x, y = pot_node[0], pot_node[1]

        # Boundary condition
        if (x < 0) or (x > 1000) or (y < 0) or (y > 1000): 
            return True
        
        # Obstacle 1 (Circle Up)
        elif (x-200)**2 + (y-800)**2 - (100+clear)**2 <= 0:   
            return True
        
        # Obstacle 2 (Square) 
        elif x >= 25-clear and x <= 175+clear and y >= 425-clear and y <= 575+clear: 
            return True
        
        # Obstacle 3 (Rectangle Up)
        elif x >= 375-clear and x <= 625+clear and y >= 425-clear and y <= 575+clear:      
            return True
        
          # Obstacle 4 (Circle Down)
        elif (x-200)**2 + (y-200)**2 - (100+clear)**2 <= 0:                
            return True
        
        # Obstacle 3 (Rectangle Down)
        elif x >= 725-clear and x <= 875+clear and y >= 200-clear and y <= 400+clear:      
            return True
        
        # Node in Freespace
        else:
            return False 
        

    #-------------------------------------------------------------------------
    
    def approximate_node(self, pot_node):
        x, y, theta_rad = pot_node[0], pot_node[1], pot_node[2]
        theta_deg = (theta_rad*180)/math.pi
        dec_x, dec_y = math.modf(x)[0], math.modf(y)[0]
        
        # X approximation
        if dec_x < 0.5:
            x = math.floor(x)
        else:
            x = math.ceil(x)
        
        # Y approximation
        if dec_y < 0.5:
            y = math.floor(y)
        else:
            y = math.ceil(y)

        # theta approximation
        theta_deg_norm = theta_deg/30
        theta_dec, theta_int = math.modf(theta_deg_norm)[0], math.modf(theta_deg_norm)[1]

        if theta_dec < 0.5:
            theta_deg = theta_int*30
        else:
            theta_deg = (theta_int+1)*30
            
        theta_deg = theta_deg % 360                                            # to keep angle within 360 always
        theta_rad = math.radians(theta_deg)
        return [x, y, theta_rad]

    #-------------------------------------------------------------------------
    
    def goal_threshold(self):
        # This method is used to check if robot is in the goal radius, because it may not reach the exact loaction due to limited action set
        x_goal = goal.state[0]
        y_goal = goal.state[1]
        
        if (self.state[0]-x_goal)**2 + (self.state[1]-y_goal)**2 - 625 <= 0:   # radius = 25
            return True
        else:
            return False
    #-------------------------------------------------------------------------
    
    def generate_children(self,R1,R2):
        # This method applies the actions functions to generate the children nodes of the current node 
        
        children = []
        r = 3.8 
        # linear velocity
        u1 = (2*math.pi*r*R1)/60   #R1 and R2 diff for every subfunction
        u2 = (2*math.pi*r*R2)/60   
        
        actions = [[u1,u1], [u2,u2],[u1,0],[0,u2],[u1,u2],[u2,u1],[u2,0],[0,u1]]
        
        for action in actions:
            child = self.generate_child(action[0], action[1])
            if child:
                children.append(child)
                
        return children
    
    #-------------------------------------------------------------------------
    
    def generate_child(self, ul, ur):
        # This method performs the requested action on the current node
        
        t, x, y = 0, 0, 0     
        r = 3.8    
        L = 3.54    
        dt = 0.05
        theta = self.state[2]
        
        D=0
        start = self.state
        
        while t<1:    

            t = t + dt
            dx = 0.5*r * (ul + ur) * math.cos(theta) * dt
            x += dx        
            dy = 0.5*r * (ul + ur) * math.sin(theta) * dt        
            y += dy
            theta+= (r / L) * (ur - ul) * dt        
            D = D + (dx**2 + dy**2)**0.5
            
            # Pot node in not an instance of node class, it is just a list of x,y,theta values (i.e similar to state of the node)
            pot_node = [self.state[0] + x, self.state[1] + y, theta]
            
            if self.check_obstacle_space(pot_node):
                return None

        # print("potnode", pot_node)
        pot_node = self.approximate_node(pot_node)
        cost_to_come = self.cost_to_come + D
        cost_to_go = ((pot_node[0] - goal.state[0])**2 + (pot_node[1] - goal.state[1])**2)**0.5
        cost = cost_to_come + cost_to_go
        new_node = Node(pot_node, self, cost_to_come, cost_to_go, cost, ul, ur)

        return new_node
 
    #-------------------------------------------------------------------------
    
    def find_path(self, goal_node):
        print("Shortest Path: ")
        # Backtracking the parent node to find the shortest path
        # Print sequence GOAL node to START node

        # current_state = goal_node.state
        current_node = goal_node
        path = []

        while(current_node.state != self.state):
            
            path.append(current_node)
            current_node = current_node.parent

            # path.append(current_state)
            # r = int(current_state[1])                                        # node coordinates even after approximation will be
            # c = int(current_state[0])                                        # multiples of 0.5, to use as array indices, multiply by 2
            # ang = int(math.degrees(current_state[2])/30)
            # print(r,c,ang, "->",current_state)
            # current_state = visited_states_parent[r][c][ang]
            # print(current_state)
            
        return path

#-----------------------------------------------------------------------------
# Main
#-----------------------------------------------------------------------------

if __name__== "__main__":

    global goal
    global clear

    while True:

        #---------------------------------------------------------------------
        # User Input
        #---------------------------------------------------------------------
        # Start node
        x1, y1, theta_s = map(float, input("Please input the X, Y, theta(in degrees) coordinates of the start node:\n").split())
        x1 , y1 = x1*100, y1*100  # mag factor
        # Goal node
        x2, y2, theta_g = map(float, input("Please input the X, Y, theta(in degrees) coordinates of the goal node:\n").split())
        x2 , y2 = x2*100, y2*100  # mag factor
        # Wheel RPM
        print("Chosen wheel RPM: L:50, R:60")
        R1, R2 = 50, 60
        # R1,R2 = map(float, input("Please input the RPM for left and right wheel:\n").split())
        # 45/50 # 50/60
        # Clearance
        clear = float(input("Please input the clearance:\n"))
        clear = clear*100 # mag factor
        
        input_node = Node([x1, y1, math.radians(theta_s)] , None, 0, ((x1 - x2)**2 + (y1 - y2)**2)**0.5, ((x1 - x2)**2 + (y1 - y2)**2)**0.5, 0, 0)
        
        goal =  Node([x2, y2, math.radians(theta_g)] , None, 9999999, 0, 9999999, 0 , 0)
        
        # obstacle check
        if goal.check_obstacle_space(goal.state) or input_node.check_obstacle_space(input_node.state):
            print("Input Coordinates are in obstacle space!")
        else:
            break    

    # Using python's inbuilt queue from collections module, because it performs faster enqueue and dequeue operations compared to a list
    # queue = deque()
    queue = []
    queue.append(input_node)

    # checking this array for visited
    visited_states_cost = np.zeros((1001,1001,12))
    visited_states_parent = [[[None for ori in range(12)]for col in range(1001)] for row in range(1001)]
      
    # maintaining for visualizing exploration in pygame
    visited_states = []
    visited_states.append(input_node)

    # if input_node.parent != None:
    #     visited_states.append([input_node.state, input_node.parent.state])
    # else:
    #     visited_states.append([input_node.state, None])
    
    
    t = time.time()

    # A star's Implementation
    while queue:
        queue.sort(key = lambda x: x.cost)
        current_node = queue.pop(0)
        # print(current_node, end = '\n')
        
        #---------------------------------------------------------------------
        # Goal found!
        #---------------------------------------------------------------------
        if current_node.goal_threshold():
            print("Goal Found\n")      
            shortest = input_node.find_path(current_node)
            break

        #---------------------------------------------------------------------
        # Goal not found yet, explore on
        #---------------------------------------------------------------------
        children = current_node.generate_children(R1, R2) 
        # print("children", children)
        for child in children:
            r = int(child.state[1])                                        # node coordinates even after approximation will be
            c = int(child.state[0])                                        # multiples of 0.5, to use as array indices, multiply by 2
            ang = int(math.degrees(child.state[2])/30)
     
            # if child.state not in visited_states:
            if visited_states_cost[r][c][ang] == 0:
                visited_states_cost[r][c][ang] = child.cost                                  # mark visited
                visited_states_parent[r][c][ang] = child.parent.state
                visited_states.append(child)
                queue.append(child)
                print(r,c,ang, "->", child.state[1], child.state[0], child.state[2],)
        
            elif visited_states_cost[r][c][ang] > child.cost:
                print('update alert:',visited_states_cost[r][c][ang] , child.cost)
                visited_states_cost[r][c][ang] = child.cost
                visited_states_parent[r][c][ang] = child.parent.state
                                        
    print("Execution time", time.time()-t)

#______________________Pygame Animation_______________________________________ 

    print("Running pygame animation..................")
    pygame.init()

    counter = 0
    screen = pygame.display.set_mode((1000,1000))
    
    while True:

        # Map Generation in pygame
        screen.fill((0,0,0))
        
        # Inflated obstacles
        pygame.draw.circle(screen, (255, 0, 0), (200, 800), 100 + clear)
        pygame.draw.polygon(screen, (255, 0, 0), ((25 - clear, 425 - clear), (175 + clear, 425 - clear), (175 + clear, 575 + clear), (25 - clear, 575 + clear)))
        pygame.draw.polygon(screen, (255, 0, 0), ((375 - clear, 425 - clear), (625 + clear, 425 - clear), (625 + clear, 575 + clear), (375 - clear, 575 + clear)))
        pygame.draw.circle(screen, (255, 0, 0), (200, 200), 100 + clear)
        pygame.draw.polygon(screen, (255, 0, 0), ((725 - clear, 700 - clear), (875 + clear, 700 - clear), (875 + clear, 900 + clear), (725 - clear, 900 + clear)))

        # Original obstacles
        pygame.draw.circle(screen, (0,0,255), (200, 800), 100 )
        pygame.draw.polygon(screen, (0,0,255), ((25, 425), (175 , 425), (175 , 575 ), (25, 575 )))
        pygame.draw.polygon(screen, (0,0,255), ((375, 425), (625 , 425), (625 , 575 ), (375, 575 )))
        pygame.draw.circle(screen, (0,0,255), (200, 200), 100 )
        pygame.draw.polygon(screen, (0,0,255), ((725, 700), (875 , 700), (875 , 900 ), (725, 900 )))

        # Goal threshold
        pygame.draw.circle(screen, (0,255,0), (goal.state[0], 1000-goal.state[1]), 25)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
        if counter == 0:
            
            #-----------------------------------------------------------------
            # Draw Exploration
            #-----------------------------------------------------------------
            for node in visited_states:
                print(node)
                child = node.state
                parent = node.parent
                ul = node.ul
                ur = node.ur
                t, x, y = 0, 0, 0     
                r = 3.8    
                L = 3.54    
                dt = 0.05
                D = 0
                theta = child[2]
                previous_intermediate_node = node.state

                if parent != None:  
                    
                    while t<1:    
                        t = t + dt
                        dx = 0.5*r * (ul + ur) * math.cos(theta) * dt
                        x += dx        
                        dy = 0.5*r * (ul + ur) * math.sin(theta) * dt        
                        y += dy
                        theta+= (r / L) * (ur - ul) * dt        
                        D = D + (dx**2 + dy**2)**0.5
                        
                        # Pot node in not an instance of node class, it is just a list of x,y,theta values (i.e similar to state of the node)
                        pot_node = [child[0] + x, child[1] + y, theta]
                        
                        if node.check_obstacle_space(pot_node):
                            continue

                        pygame.draw.line(screen, (255,255,255), (pot_node[0], 1000-pot_node[1]), (previous_intermediate_node[0], 1000-previous_intermediate_node[1]))      
                        previous_intermediate_node = pot_node


                # pygame.draw.circle(screen, (255,255,255), (state[0]*2, 1000-state[1]*2), 1) 
                pygame.display.update()
                    
            #-----------------------------------------------------------------
            # Draw Shortest Path
            #-----------------------------------------------------------------
            velocity_publisher = rospack.get_path('velocity_publisher')
            path = os.path.join(velocity_publisher, 'nodes/shortest_path.txt')
            with open(path, 'w') as file:

                shortest = shortest[::-1]
                for node in shortest:
                    # # print(node)
                    child, parent, ul, ur = node.state, node.parent, node.ul, node.ur
                    
                    #_____________________________Drawing the path curves_______________________________

                    # t, x, y = 0, 0, 0     
                    # r =  3.8    
                    # L = 3.54    
                    # dt = 0.05
                    # D = 0
                    # theta = child[2]
                    # previous_intermediate_node = node.state

                    # while t<1:    
                    #     t = t + dt
                    #     dx = 0.5*r * (ul + ur) * math.cos(theta) * dt
                    #     x += dx        
                    #     dy = 0.5*r * (ul + ur) * math.sin(theta) * dt        
                    #     y += dy
                    #     theta+= (r / L) * (ur - ul) * dt        
                    #     D = D + (dx**2 + dy**2)**0.5
                        
                    #     # Pot node in not an instance of node class, it is just a list of x,y,theta values (i.e similar to state of the node)
                    #     pot_node = [child[0] + x, child[1] + y, theta]
                        
                    #     if node.check_obstacle_space(pot_node):
                    #         continue

                    #     pygame.draw.line(screen, (255,0,0), (pot_node[0], 1000-pot_node[1]), (previous_intermediate_node[0], 1000-previous_intermediate_node[1]), 3)      
                    #     previous_intermediate_node = pot_node
                
                    #_____________________________Drawing the path points_______________________________
                    pygame.draw.circle(screen, (255, 0, 0), (node.state[0], 1000-node.state[1]), 5)

                    #______________Demagnification for running it in ros simulation________________
                   
                    child[0], child[1] = child[0]/100, child[1]/100
                    #____________________________________________________________________________
                    
                    #__________________Writing json string to the file___________________________
                    state = str({"child": child, "parent": parent, "ul": ul, "ur": ur})
                    file.write(state + '\n')

            pygame.display.update()
            
        counter +=1    
